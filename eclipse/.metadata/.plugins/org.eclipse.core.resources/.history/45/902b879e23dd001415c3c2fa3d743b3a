package IndustrialBreakout.TileEntity;

import IndustrialBreakout.Machines.recipes.GrinderRecipes;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.inventory.IInventory;
import net.minecraft.inventory.ISidedInventory;
import net.minecraft.item.ItemStack;
import net.minecraft.item.crafting.FurnaceRecipes;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.tileentity.TileEntity;
import net.minecraftforge.common.util.ForgeDirection;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;

public class TileEntityPoweredFurnace extends TileEntity implements IInventory, ISidedInventory
{
    /**
     * The ItemStacks that hold the items currently being used in the poweredFurnace
     */
    private ItemStack[] poweredFurnaceItemStacks = new ItemStack[2];

    /** The number of ticks that the poweredFurnace will keep burning */
    public int heat = 0;

    /** The number of ticks that the current item has been cooking for */
    public int poweredFurnaceCookTime = 0;

    /**
     * Returns the number of slots in the inventory.
     */
    public int getSizeInventory()
    {
        return this.poweredFurnaceItemStacks.length;
    }

    /**
     * Returns the stack in slot i
     */
    public ItemStack getStackInSlot(int par1)
    {
        return this.poweredFurnaceItemStacks[par1];
    }

    /**
     * Removes from an inventory slot (first arg) up to a specified number (second arg) of items and returns them in a
     * new stack.
     */
    public ItemStack decrStackSize(int par1, int par2)
    {
        if (this.poweredFurnaceItemStacks[par1] != null)
        {
            ItemStack var3;

            if (this.poweredFurnaceItemStacks[par1].stackSize <= par2)
            {
                var3 = this.poweredFurnaceItemStacks[par1];
                this.poweredFurnaceItemStacks[par1] = null;
                return var3;
            }
            else
            {
                var3 = this.poweredFurnaceItemStacks[par1].splitStack(par2);

                if (this.poweredFurnaceItemStacks[par1].stackSize == 0)
                {
                    this.poweredFurnaceItemStacks[par1] = null;
                }

                return var3;
            }
        }
        else
        {
            return null;
        }
    }

    /**
     * When some containers are closed they call this on each slot, then drop whatever it returns as an EntityItem -
     * like when you close a workbench GUI.
     */
    public ItemStack getStackInSlotOnClosing(int par1)
    {
        if (this.poweredFurnaceItemStacks[par1] != null)
        {
            ItemStack var2 = this.poweredFurnaceItemStacks[par1];
            this.poweredFurnaceItemStacks[par1] = null;
            return var2;
        }
        else
        {
            return null;
        }
    }

    /**
     * Sets the given item stack to the specified slot in the inventory (can be crafting or armor sections).
     */
    public void setInventorySlotContents(int par1, ItemStack par2ItemStack)
    {
        this.poweredFurnaceItemStacks[par1] = par2ItemStack;

        if (par2ItemStack != null && par2ItemStack.stackSize > this.getInventoryStackLimit())
        {
            par2ItemStack.stackSize = this.getInventoryStackLimit();
        }
    }

    /**
     * Returns the name of the inventory.
     */
    public String getInventoryName()
    {
        return "container.poweredFurnace";
    }

    
    public void readFromNBT(NBTTagCompound par1)
    {
        super.readFromNBT(par1);
        NBTTagList var2 = par1.getTagList("Items",10);
        this.poweredFurnaceItemStacks = new ItemStack[this.getSizeInventory()];

        for (int var3 = 0; var3 < var2.tagCount(); ++var3)
        {
            NBTTagCompound var4 = (NBTTagCompound)var2.getCompoundTagAt(var3);
            byte var5 = var4.getByte("Slot");

            if (var5 >= 0 && var5 < this.poweredFurnaceItemStacks.length)
            {
                this.poweredFurnaceItemStacks[var5] = ItemStack.loadItemStackFromNBT(var4);
            }
        }

        this.heat = par1.getShort("BurnTime");
        this.poweredFurnaceCookTime = par1.getShort("CookTime");
    }
    
    
    public void writeToNBT(NBTTagCompound par1NBTTagCompound)
    {
        super.writeToNBT(par1NBTTagCompound);
        par1NBTTagCompound.setShort("BurnTime", (short)this.heat);
        par1NBTTagCompound.setShort("CookTime", (short)this.poweredFurnaceCookTime);
        NBTTagList var2 = new NBTTagList();

        for (int var3 = 0; var3 < this.poweredFurnaceItemStacks.length; ++var3)
        {
            if (this.poweredFurnaceItemStacks[var3] != null)
            {
                NBTTagCompound var4 = new NBTTagCompound();
                var4.setByte("Slot", (byte)var3);
                this.poweredFurnaceItemStacks[var3].writeToNBT(var4);
                var2.appendTag(var4);
            }
        }

        par1NBTTagCompound.setTag("Items", var2);
    }
	
    /**
     * Returns the maximum stack size for a inventory slot. Seems to always be 64, possibly will be extended. *Isn't
     * this more of a set than a get?*
     */
    public int getInventoryStackLimit()
    {
        return 64;
    }

    @SideOnly(Side.CLIENT)

    /**
     * Returns an integer between 0 and the passed value representing how close the current item is to being completely
     * cooked
     */
    public int getCookProgressScaled(int par1)
    {
        return this.poweredFurnaceCookTime * par1 / 300;
    }

    @SideOnly(Side.CLIENT)

    /**
     * Returns an integer between 0 and the passed value representing how much burn time is left on the current fuel
     * item, where 0 means that the item is exhausted and the passed value means that the item is fresh
     */
    public int getBurnTimeRemainingScaled(int par1)
    {
        return this.heat * par1;
    }

    /**
     * Returns true if the poweredFurnace is currently burning
     */
    public boolean hasHeat()
    {
        return this.heat > 0;
    }

    /**
     * Allows the entity to update its state. Overridden in most subclasses, e.g. the mob spawner uses this to count
     * ticks and creates a new spawn inside its implementation.
     */
    public void updateEntity()
    {
        boolean var1 = this.heat > 0;
        boolean var2 = false;
        
        ItemStack var700; 
        
        if(this.poweredFurnaceItemStacks[0]!= null){
        	var700 = FurnaceRecipes.smelting().getSmeltingResult(this.poweredFurnaceItemStacks[0]);
        }else{
        	return;
        }
        
		int heaters = 0;
		
		if(worldObj.getTileEntity(this.xCoord+1, this.yCoord, this.zCoord) instanceof TileEntityHeater){
			TileEntityHeater teh = (TileEntityHeater)worldObj.getTileEntity(this.xCoord+1, this.yCoord, this.zCoord);
			if(teh.curEnergy > 0){
				heaters++;
				teh.curEnergy--;
			}
		}
		if(worldObj.getTileEntity(this.xCoord-1, this.yCoord, this.zCoord) instanceof TileEntityHeater){
			TileEntityHeater teh = (TileEntityHeater)worldObj.getTileEntity(this.xCoord-1, this.yCoord, this.zCoord);
			if(teh.curEnergy > 0){
				heaters++;
				teh.curEnergy--;
			}
		}
		if(worldObj.getTileEntity(this.xCoord, this.yCoord+1, this.zCoord) instanceof TileEntityHeater){
			TileEntityHeater teh = (TileEntityHeater)worldObj.getTileEntity(this.xCoord, this.yCoord+1, this.zCoord);
			if(teh.curEnergy > 0){
				heaters++;
				teh.curEnergy--;
			}
		}
		if(worldObj.getTileEntity(this.xCoord, this.yCoord-1, this.zCoord) instanceof TileEntityHeater){
			TileEntityHeater teh = (TileEntityHeater)worldObj.getTileEntity(this.xCoord, this.yCoord-1, this.zCoord);
			if(teh.curEnergy > 0){
				heaters++;
				teh.curEnergy--;
			}
		}
		if(worldObj.getTileEntity(this.xCoord, this.yCoord, this.zCoord+1) instanceof TileEntityHeater){
			TileEntityHeater teh = (TileEntityHeater)worldObj.getTileEntity(this.xCoord, this.yCoord, this.zCoord+1);
			if(teh.curEnergy > 0){
				heaters++;
				teh.curEnergy--;
			}
		}
		if(worldObj.getTileEntity(this.xCoord, this.yCoord, this.zCoord-1) instanceof TileEntityHeater){
			TileEntityHeater teh = (TileEntityHeater)worldObj.getTileEntity(this.xCoord, this.yCoord, this.zCoord-1);
			if(teh.curEnergy > 0){
				heaters++;
				teh.curEnergy--;
			}
		}
		
		heat = heaters*25;
		
        if(heat > 100)
        	heat = 100;

        if (!this.worldObj.isRemote)
        {
            if (this.heat == 0 && this.canSmelt())
            {

                if (this.heat > 0)
                {
                    var2 = true;

                    if (this.poweredFurnaceItemStacks[1] != null)
                    {
                        --this.poweredFurnaceItemStacks[1].stackSize;

                        if (this.poweredFurnaceItemStacks[1].stackSize == 0)
                        {
                            this.poweredFurnaceItemStacks[1] = this.poweredFurnaceItemStacks[1].getItem().getContainerItem(poweredFurnaceItemStacks[1]);
                        }
                    }
                }
            }

            if (this.canSmelt())
            {
            	if(hasHeat())
            	{
            		this.poweredFurnaceCookTime += heat/25;
            		
	                if (this.poweredFurnaceCookTime >= 300)
	                {
	                    this.poweredFurnaceCookTime = 0;
	                    this.smeltItem();
	                    var2 = true;
	                }
            	}
            }
            else
            {
                this.poweredFurnaceCookTime = 0;
            }

            if (var1 != this.heat > 0)
            {
                var2 = true;
            }
        }

        if (var2)
        {
            this.markDirty();
        }
    }

    /**
     * Returns true if the poweredFurnace can smelt an item, i.e. has a source item, destination stack isn't full, etc.
     */
    private boolean canSmelt()
    {
        if (this.poweredFurnaceItemStacks[0] == null)
        {
            return false;
        }
        else
        {
            ItemStack var1 = FurnaceRecipes.smelting().getSmeltingResult(this.poweredFurnaceItemStacks[0]);
            if (var1 == null) return false;
            if (this.poweredFurnaceItemStacks[1] == null) return true;
            if (!this.poweredFurnaceItemStacks[1].isItemEqual(var1)) return false;
            int result = poweredFurnaceItemStacks[1].stackSize + var1.stackSize;
            return (result <= getInventoryStackLimit() && result <= var1.getMaxStackSize());
        }
    }
    
    public boolean isItemFuel(ItemStack item){
    	return false;
    }

    /**
     * Turn one item from the poweredFurnace source stack into the appropriate smelted item in the poweredFurnace result stack
     */
    public void smeltItem()
    {
        if (this.canSmelt())
        {
            ItemStack var1 = FurnaceRecipes.smelting().getSmeltingResult(this.poweredFurnaceItemStacks[0]);

            if (this.poweredFurnaceItemStacks[1] == null)
            {
                this.poweredFurnaceItemStacks[1] = var1.copy();
            }
            else if (this.poweredFurnaceItemStacks[1].isItemEqual(var1))
            {
                poweredFurnaceItemStacks[1].stackSize += var1.stackSize;
            }

            --this.poweredFurnaceItemStacks[0].stackSize;

            if (this.poweredFurnaceItemStacks[0].stackSize <= 0)
            {
                this.poweredFurnaceItemStacks[0] = null;
            }
        }
    }

    /**
     * Do not make give this method the name canInteractWith because it clashes with Container
     */
    public boolean isUseableByPlayer(EntityPlayer par1EntityPlayer)
    {
        return this.worldObj.getTileEntity(this.xCoord, this.yCoord, this.zCoord) != this ? false : par1EntityPlayer.getDistanceSq((double)this.xCoord + 0.5D, (double)this.yCoord + 0.5D, (double)this.zCoord + 0.5D) <= 64.0D;
    }

	@Override
	public void openInventory() {}

	@Override
	public void closeInventory() {}

	@Override
	public boolean hasCustomInventoryName() {
		return true;
	}

	@Override
	public int[] getAccessibleSlotsFromSide(int side) {
		return side!=1?new int[]{0} : new int[]{1};
	}
	
	@Override
	public boolean isItemValidForSlot(int i, ItemStack itemstack) {
		return i == 0;
	}

	@Override
	public boolean canInsertItem(int slot, ItemStack item, int side) {
		return (slot==0 && FurnaceRecipes.smelting().getSmeltingResult(item)!=null);
	}

	@Override
	public boolean canExtractItem(int slot, ItemStack item, int side) {
		return slot == 1;
	}
}
