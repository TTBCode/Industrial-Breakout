package IndustrialBreakout.Machines;

import java.util.Random;

import net.minecraft.block.Block;
import net.minecraft.block.BlockContainer;
import net.minecraft.block.material.Material;
import net.minecraft.client.renderer.texture.IIconRegister;
import net.minecraft.entity.EntityLiving;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.item.EntityItem;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.IIcon;
import net.minecraft.util.MathHelper;
import net.minecraft.world.World;
import IndustrialBreakout.Main;
import IndustrialBreakout.TileEntity.TileEntityGrinder;
import IndustrialBreakout.reference.Reference;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;

public class BlockIBMachineGrinder extends BlockContainer
{
    /**
     * Is the random generator used by grinder to drop the inventory contents in random directions.
     */
    private Random grinderRand = new Random();

    /** True if this is an active grinder, false if idle */
    private final boolean isActive;

    /**
     * This flag is used to prevent the grinder inventory to be dropped upon block removal, is used internally when the
     * grinder block changes from idle to active and vice-versa.
     */
    private static boolean keepGrinderInventory = false;

    public BlockIBMachineGrinder(boolean par2)
    {
        super(Material.rock);
        this.isActive = par2;
    }

    /**
     * Called whenever the block is added into the world. Args: world, x, y, z
     */
    public void onBlockAdded(World par1World, int par2, int par3, int par4)
    {
        super.onBlockAdded(par1World, par2, par3, par4);
        this.setDefaultDirection(par1World, par2, par3, par4);
    }

    /**
     * set a blocks direction
     */
    private void setDefaultDirection(World par1World, int par2, int par3, int par4)
    {
        if (!par1World.isRemote)
        {
            Block var5 = par1World.getBlock(par2, par3, par4 - 1);
            Block var6 = par1World.getBlock(par2, par3, par4 + 1);
            Block var7 = par1World.getBlock(par2 - 1, par3, par4);
            Block var8 = par1World.getBlock(par2 + 1, par3, par4);
            byte var9 = 3;

            if (var5.func_149730_j() && !var6.func_149730_j())
            {
                var9 = 3;
            }

            if (var6.func_149730_j() && !var5.func_149730_j())
            {
                var9 = 2;
            }

            if (var7.func_149730_j() && !var8.func_149730_j())
            {
                var9 = 5;
            }

            if (var8.func_149730_j() && !var7.func_149730_j())
            {
                var9 = 4;
            }

            par1World.setBlockMetadataWithNotify(par2, par3, par4, var9, 2);
        }
    }

    /**
     * Called upon block activation (right click on the block.)
     */
    public boolean onBlockActivated(World world, int x, int y, int z, EntityPlayer player, int par6, float par7, float par8, float par9)
    {
        if (world.isRemote)
        {
            return true;
        }
        else
        {
            player.openGui(Main.instance, 2, world, x, y, z);
        }
        return true;
    }

    /**
     * Returns a new instance of a block's tile entity class. Called on placing the block.
     */
    public TileEntity createNewTileEntity(World par1World, int i)
    {
        return new TileEntityGrinder();
    }

    /**
     * Called when the block is placed in the world.
     */
    public void onBlockPlacedBy(World world, int x, int y, int z, EntityLivingBase living, ItemStack itemStack)
    {
        int l = MathHelper.floor_double((double)(living.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3;
        byte b0 = 3;
        
        if (l == 0) b0 = 2;
        if (l == 1) b0 = 5;
        if (l == 2) b0 = 3;
        if (l == 3) b0 = 4;
        
        world.setBlockMetadataWithNotify(x, y, z, b0, 2);
    }
    
    /**
     * ejects contained items into the world, and notifies neighbours of an update, as appropriate
     */
    public void breakBlock(World par1World, int par2, int par3, int par4, Block par5, int par6)
    {
        if (!keepGrinderInventory)
        {
            TileEntityGrinder tileentitygrinder = (TileEntityGrinder)par1World.getTileEntity(par2, par3, par4);

            if (tileentitygrinder != null)
            {
                for (int j1 = 0; j1 < tileentitygrinder.getSizeInventory(); ++j1)
                {
                    ItemStack itemstack = tileentitygrinder.getStackInSlot(j1);

                    if (itemstack != null)
                    {
                        float f = this.grinderRand.nextFloat() * 0.8F + 0.1F;
                        float f1 = this.grinderRand.nextFloat() * 0.8F + 0.1F;
                        float f2 = this.grinderRand.nextFloat() * 0.8F + 0.1F;

                        while (itemstack.stackSize > 0)
                        {
                            int k1 = this.grinderRand.nextInt(21) + 10;

                            if (k1 > itemstack.stackSize)
                            {
                                k1 = itemstack.stackSize;
                            }

                            itemstack.stackSize -= k1;
                            EntityItem entityitem = new EntityItem(par1World, (double)((float)par2 + f), (double)((float)par3 + f1), (double)((float)par4 + f2), new ItemStack(itemstack.getItem(), k1, itemstack.getItemDamage()));

                            if (itemstack.hasTagCompound())
                            {
                                entityitem.getEntityItem().setTagCompound((NBTTagCompound)itemstack.getTagCompound().copy());
                            }

                            float f3 = 0.05F;
                            entityitem.motionX = (double)((float)this.grinderRand.nextGaussian() * f3);
                            entityitem.motionY = (double)((float)this.grinderRand.nextGaussian() * f3 + 0.2F);
                            entityitem.motionZ = (double)((float)this.grinderRand.nextGaussian() * f3);
                            par1World.spawnEntityInWorld(entityitem);
                        }
                    }
                }

                par1World.func_147453_f(par2, par3, par4, par5);
            }
        }

        super.breakBlock(par1World, par2, par3, par4, par5, par6);
    }
    
    @SideOnly(Side.CLIENT)
    private IIcon[] icons;
    
    @SideOnly(Side.CLIENT)
    public void registerBlockIcons(IIconRegister ir){
    	icons = new IIcon[3];
    	
    	icons[0] = ir.registerIcon(Reference.MOD_ID+":9");
    	icons[1] = ir.registerIcon(Reference.MOD_ID+":10");
    	icons[2] = ir.registerIcon(Reference.MOD_ID+":17");
    }
    
    @SideOnly(Side.CLIENT)
    public IIcon getIcon(int side, int metadata){
    	if(side == 0 || side == 1) return icons[1];
    	else if(metadata == 0 ? side == 3 : side == metadata) return icons[2];
    	else return icons[0];
    }
}
