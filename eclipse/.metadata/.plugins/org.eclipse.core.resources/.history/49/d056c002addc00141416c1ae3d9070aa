package IndustrialBreakout.Machines;

import java.util.Random;

import javax.swing.Icon;

import net.minecraft.block.Block;
import net.minecraft.block.BlockContainer;
import net.minecraft.block.BlockPistonBase;
import net.minecraft.block.material.Material;
import net.minecraft.client.renderer.texture.IIconRegister;
import net.minecraft.entity.EntityLiving;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.item.EntityItem;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.tileentity.TileEntityDispenser;
import net.minecraft.util.IIcon;
import net.minecraft.util.MathHelper;
import net.minecraft.world.World;
import IndustrialBreakout.Main;
import IndustrialBreakout.TileEntity.TileEntityCompressor;
import IndustrialBreakout.reference.Reference;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;

public class BlockIBMachineCompressor extends BlockContainer
{
    /**
     * Is the random generator used by compressor to drop the inventory contents in random directions.
     */
    private Random compressorRand = new Random();

    /** True if this is an active compressor, false if idle */
    private final boolean isActive;

    /**
     * This flag is used to prevent the compressor inventory to be dropped upon block removal, is used internally when the
     * compressor block changes from idle to active and vice-versa.
     */
    private static boolean keepCompressorInventory = false;

    public BlockIBMachineCompressor(boolean par2)
    {
        super(Material.rock);
        this.isActive = par2;
    }
    
    @SideOnly(Side.CLIENT)
    private IIcon[] icons;
    
    @SideOnly(Side.CLIENT)
    public void registerBlockIcons(IIconRegister ir){
    	icons = new IIcon[3];
    	
    	icons[0] = ir.registerIcon(Reference.MOD_ID+":9");
    	icons[1] = ir.registerIcon(Reference.MOD_ID+":10");
    	icons[2] = ir.registerIcon(Reference.MOD_ID+":12");
    }
    
    @SideOnly(Side.CLIENT)
    public IIcon getIcon(int side, int metadata){
    	switch(side)
    	{
    		case 0:
    			return icons[1];
    		case 1:
    			return icons[1];
    		case 3:
    			return icons[2];
    		default:
    			return icons[0];
    	}
    }
    
    

    /**
     * Called whenever the block is added into the world. Args: world, x, y, z
     */
    public void onBlockAdded(World par1World, int par2, int par3, int par4)
    {
        super.onBlockAdded(par1World, par2, par3, par4);
    }

    /**
     * Called upon block activation (right click on the block.)
     */
    public boolean onBlockActivated(World world, int x, int y, int z, EntityPlayer player, int par6, float par7, float par8, float par9)
    {
        if (world.isRemote)
        {
            return true;
        }
        else
        {
            player.openGui(Main.instance, 0, world, x, y, z);
            
        }
        return true;
    }

    /**
     * Returns a new instance of a block's tile entity class. Called on placing the block.
     */
    public TileEntity createNewTileEntity(World par1World, int i)
    {
        return new TileEntityCompressor();
    }

    /**
     * Called when the block is placed in the world.
     */
    public void onBlockPlacedBy(World par1World, int par2, int par3, int par4, EntityLiving par5EntityLiving)
    {
    }

    /**
     * Called when the block is placed in the world.
     */
    public void onBlockPlacedBy(World par1World, int par2, int par3, int par4, EntityLiving par5EntityLiving, ItemStack itemStack)
    {
        int var6 = MathHelper.floor_double((double)(par5EntityLiving.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3;

        if (var6 == 0)
        {
            par1World.setBlockMetadataWithNotify(par2, par3, par4, 2, 2);
        }

        if (var6 == 1)
        {
            par1World.setBlockMetadataWithNotify(par2, par3, par4, 5, 2);
        }

        if (var6 == 2)
        {
            par1World.setBlockMetadataWithNotify(par2, par3, par4, 3, 2);
        }

        if (var6 == 3)
        {
            par1World.setBlockMetadataWithNotify(par2, par3, par4, 4, 2);
        }
    }
    
    private void onBlockPlaced(World world, int x, int y, int z)
    {
        if (!world.isRemote)
        {
            Block block = world.getBlock(x, y, z - 1);
            Block block1 = world.getBlock(x, y, z + 1);
            Block block2 = world.getBlock(x - 1, y, z);
            Block block3 = world.getBlock(x + 1, y, z);
            byte b0 = 3;

            if (block.func_149730_j() && !block1.func_149730_j())
            {
                b0 = 3;
            }

            if (block1.func_149730_j() && !block.func_149730_j())
            {
                b0 = 2;
            }

            if (block2.func_149730_j() && !block3.func_149730_j())
            {
                b0 = 5;
            }

            if (block3.func_149730_j() && !block2.func_149730_j())
            {
                b0 = 4;
            }

            world.setBlockMetadataWithNotify(x, y, z, b0, 2);
        }
    }

    
    /**
     * ejects contained items into the world, and notifies neighbours of an update, as appropriate
     */
    public void breakBlock(World par1World, int par2, int par3, int par4, Block par5, int par6)
    {
        if (!keepCompressorInventory)
        {
            TileEntityCompressor tileentitycompressor = (TileEntityCompressor)par1World.getTileEntity(par2, par3, par4);

            if (tileentitycompressor != null)
            {
                for (int j1 = 0; j1 < tileentitycompressor.getSizeInventory(); ++j1)
                {
                    ItemStack itemstack = tileentitycompressor.getStackInSlot(j1);

                    if (itemstack != null)
                    {
                        float f = this.compressorRand.nextFloat() * 0.8F + 0.1F;
                        float f1 = this.compressorRand.nextFloat() * 0.8F + 0.1F;
                        float f2 = this.compressorRand.nextFloat() * 0.8F + 0.1F;

                        while (itemstack.stackSize > 0)
                        {
                            int k1 = this.compressorRand.nextInt(21) + 10;

                            if (k1 > itemstack.stackSize)
                            {
                                k1 = itemstack.stackSize;
                            }

                            itemstack.stackSize -= k1;
                            EntityItem entityitem = new EntityItem(par1World, (double)((float)par2 + f), (double)((float)par3 + f1), (double)((float)par4 + f2), new ItemStack(itemstack.getItem(), k1, itemstack.getItemDamage()));

                            if (itemstack.hasTagCompound())
                            {
                                entityitem.getEntityItem().setTagCompound((NBTTagCompound)itemstack.getTagCompound().copy());
                            }

                            float f3 = 0.05F;
                            entityitem.motionX = (double)((float)this.compressorRand.nextGaussian() * f3);
                            entityitem.motionY = (double)((float)this.compressorRand.nextGaussian() * f3 + 0.2F);
                            entityitem.motionZ = (double)((float)this.compressorRand.nextGaussian() * f3);
                            par1World.spawnEntityInWorld(entityitem);
                        }
                    }
                }

                par1World.func_147453_f(par2, par3, par4, par5);
            }
        }

        super.breakBlock(par1World, par2, par3, par4, par5, par6);
    }
}
